// <auto-generated />
using System;
using EventManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventManagement.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230628171818_AddEvents")]
    partial class AddEvents
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventManagement.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("EventId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            Description = "Sample created for demo purpose",
                            EndDate = new DateTime(2023, 6, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            EventName = "Sample webinar",
                            EventType = "SEMINAR",
                            Location = "Chennai",
                            Price = 240.5,
                            StartDate = new DateTime(2023, 6, 28, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            EventId = 2,
                            Description = "Sample created for demo purpose",
                            EndDate = new DateTime(2023, 6, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            EventName = "Sample conference",
                            EventType = "CONFERENCE",
                            Location = "Chennai",
                            Price = 2400.5,
                            StartDate = new DateTime(2023, 6, 28, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
